팩토리 패턴, 추상 팩토리 패턴에서는 클래스의 속성 값이 많으면 문제점이 있다.
    1. 클라이언트 프로그램으로부터 팩토리 클래스로 많은 파라미터를 넘겨줄 때 타입, 순서 등에 대한 관리가 어려워져 에러가 발생할 확률이 높아집니다.
    2. 경우에 따라 필요없는 파라미터들에 대해서 팩토리 클래스에 일일이 null을 넘겨줘야한다.
    3. 생성해야 하는 sub class가 무거워지고 복잡해짐에 따라 팩토리 클래스 또한 복잡해진다.

빌더 패턴 구현 방법
    1. 빌더 클래스를 static nested class로 지정한다. 관례적으로 ~builder fmf qnxdlsek.
    2. 빌더 클래스의 생성자는 public으로 하며, 필수 값들에 대해서 생성자로 파라미터를 받는다.
    3. 선택적으로 기입할 만 한 값은 각각의 속성마다 메소드로 제공하며, 메소드의 리턴 값이 빌더 객체 자신이어야한다.
    4. build()로 최종 생성된 결과물을 제공한다. 생성 대상은 private이다.
