커맨드 패턴은 요청을 객체 안에 캡슐화 해서 호출하는 객체에 넘겨주는 패턴이다.  호출하는 객체는 이러한 명령을 처리할 적절한 객체를 찾고 해당 객체에 명령을 전달하면
해당 객체가 명령을 실행하는 식이다. 

>>>> 장점
실제 행위를 하는 객체와 작업을 호출하는 객체를 구분한다. 
기존 클래스는 변경되지 않으므로 새로운 명령을 추가하기가 쉽다. 

>>>> 사용 시기
작업에 따라 객체를 매개변수화해야할 때 사용한다.
서로 다른 시간에 요청을 만들고 처리할 때 사용한다.
로깅, 트랜잭션처리 롤백을 지원해야하는 경우 



command : 작업을 처리하는 인터페이스
concreteCommand : command 인터페이스를 구현한다. 이는 액션과 수신자 사이를 바인딩한다. 
client : concreteCommand를 생성한다. 이를 receiver와 연관짓는다.
invoker : 요청을 command에 수행하도록 한다.
receiver : 이 클래스는 작업을 수행한다. 


>> 요청을 객체의 형태로 캡슐화하여 사용자가 보낸 요청을 나중에 이요할 수 있도록 매소드 이름, 매개변수 등 요청에 필요한 정보를 저장 또는 로깅, 취소할 수 있게 하는 패턴이다. 

명령(command), 수신자(receiver), 요청자(invoker), 클라이언트(client)의 네 개의 용어가 항상 따른다. 
커맨드 객체는 수신자 객체를 가지고 있으며, 수신자의 메소드를 호출하고 이에 수신자는 자신에게 정의된 메소드를 수행한다. 